import Head from "next/head";
import SideBar from "@/components/SideBar";
import Header from "@/components/Header";
import React, { Fragment, useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPen } from "@fortawesome/free-solid-svg-icons";
import { getAPI, postAPI, putAPI } from "@/utils/fetchAPIs";
import { toast } from "react-toastify";
import { useSelector } from "react-redux";
import { useRouter } from "next/router";
import Image from "next/image";

export default function Instructions() {
  const { loginToken } = useSelector((state) => state.authReducer);
  const { push } = useRouter();
  const [fetchData, setFetchData] = useState(null);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [previewImg, setPreviewImg] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    (async function () {
      let token = { loginToken };
      let isAuth = await postAPI("isAuth", token, null);
      if (!isAuth?.status) {
        push("/login");
      }
    })();
  }, [loginToken, push]);

  const getData = async () => {
    setIsLoading(true);
    const data = await getAPI("instructions", null);
    if (data?.status) {
      setFetchData(data?.data);
      setIsLoading(false);
    } else {
      setIsLoading(false);
      toast.error(`Something went wrong. ${data?.message}`);
    }
  };
  useEffect(() => {
    getData();
  }, []);

  const handleImages = async (e) => {
    let images = [];
    let sFiles = [];

    for (let i = 0; i < e.target.files.length; i++) {
      sFiles.push(e.target.files[i]);
      images.push(URL.createObjectURL(e.target.files[i]));
    }
    setSelectedFiles(sFiles);
    setPreviewImg(images);
  };

  const addBtn = async () => {
    let formdata = new FormData();

    for (let i = 0; i < selectedFiles.length; i++) {
      formdata.append("file", selectedFiles[i]);
    }

    let requestOptions = {
      method: "POST",
      body: formdata,
      redirect: "follow",
    };

    await fetch(
      `${process.env.NEXT_PUBLIC_BACKEND_API}/instructions`,
      requestOptions
    )
      .then((response) => response.text())
      .then(async (result) => {
        console.log(result);
        await getData();
        setPreviewImg([]);
        setSelectedFiles([]);
      })
      .catch((error) => console.log("error", error));
  };

  return (
    <>
      <Head>
        <title>Centralized OPL</title>
        <meta name="description" content="Generated by Centralized OPL" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="d-flex flex-column flex-root">
          <div className="page d-flex flex-row flex-column-fluid">
            <SideBar />
            <div className="wrapper d-flex flex-column flex-row-fluid">
              <Header />
              <div
                className="content d-flex flex-column flex-column-fluid"
                id="kt_content"
              >
                <div className="post d-flex flex-column-fluid">
                  <div id="kt_content_container" className="container-xxl">
                    <div className="row g-5 g-xl-8">
                      <div className="col-md-6 col-12">
                        <div className="screen_header shadow">
                          <h1>Add Instruction</h1>
                          <div className="pt-5">
                            <label htmlFor="productpartname">
                              Instruction Image
                            </label>
                            <input
                              type="file"
                              className="form-control pb-2"
                              id="productpartname"
                              accept=".jpg, .png, .jpeg, .webp"
                              onChange={(e) => handleImages(e)}
                              multiple={true}
                            />
                            {previewImg && previewImg.length > 0 && (
                              <div className="previewDiv shadow">
                                {previewImg.map((item, index) => (
                                  <Fragment key={index}>
                                    <div className="previewImg">
                                      <Image
                                        src={item}
                                        alt="preview image"
                                        width={200}
                                        height={100}
                                      />
                                    </div>
                                  </Fragment>
                                ))}
                              </div>
                            )}
                            <div className="text-start py-3">
                              <button
                                onClick={addBtn}
                                className="btn fw-bold btn-primary"
                              >
                                ADD
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="col-12">
                        <div className="card card-xxl-stretch mb-5 mb-xxl-8">
                          <div className="card-header border-0 pt-5">
                            <h3 className="card-title align-items-start flex-column">
                              <span className="card-label fw-bold fs-3 mb-1">
                                Instructions
                              </span>
                              <span className="text-muted mt-1 fw-semibold fs-7">
                                {fetchData &&
                                  `Total ${fetchData.length} Instructions`}
                              </span>
                            </h3>
                          </div>
                          <div className="card-body py-3">
                            <div className="tab-content">
                              <div className="table-responsive">
                                <table className="table table-striped table-bordered table_height">
                                  <thead>
                                    <tr className="border-0">
                                      <th className=" min-w-150px">
                                        Instructionss
                                      </th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    {isLoading ? (
                                      <td>Loading...</td>
                                    ) : (
                                      fetchData &&
                                      fetchData.map((item, index) => (
                                        <tr key={index}>
                                          <td className="fw-semibold">
                                            <Image
                                              loader={({ src }) => {
                                                return `uploads/${src}`;
                                              }}
                                              src={item.instruction_img}
                                              alt=""
                                              width={200}
                                              height={100}
                                              loading="lazy"
                                            />
                                          </td>
                                        </tr>
                                      ))
                                    )}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
